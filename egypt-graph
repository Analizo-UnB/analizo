#!/usr/bin/perl -w

use Getopt::Euclid;

=head1 NAME

egypt graph - dependency graph generator

=head1 USAGE

  egypt graph [options] <input>...

=head1 DESCRIPTION

egypt graph reads the dependency information from one or more source code
directories passed as arguments, and produces as output the graph of
dependencies between the modules of the software in the graphviz(1) format.

egypt graph is part of the egypt suite.

=head1 REQUIRED ARGUMENTS

=over

=item <input>...

The input directories (or files) with source code to be processed.

Although you can pass individual files as input, this tool is more useful if
you pass entire source directories. If you pass just a couple of files, their
dependencies on modules that are not declared and/or implemented in those
files will not be calculated.

=back

=head1 OPTIONS

=over

=item --omit <functions>

Omit the given functions from the call graph.  Multiple function names
may be given separated by commas.

=for Euclid:
  functions.type: string
  functions.type.error: --omit must be given a comma-separated list of function names

=item --include-external

Include calls to external functions in the call graph.  A function is
considered external if it is not defined in any of the input files.
For example, functions in the standard C library are external.  By
default, such calls are not shown.  Even with this option, only direct
calls will be shown; there is no way to show indirect calls to
external functions.

This options only works with the GCC extractor.

=item --cluster

Cluster the functions into files, so you can see in which files are the calling
and called functions.

=item --modules

Group the functions by modules(files), and only represent calls between
modules. This is useful to see the dependencies between the modules of the
program, intead of focusing on specific functions. The arrows between the
modules will be labelled with a number that represents the number of different
places in which the calling module calls functions in the called module (i.e.
how many times module A calls module B).

It doesn't make much sense to use --modules together with --cluster.

=item --extractor <extractor>

Define wich extractor method use to analise source code. Options are "Doxyparse" and
"GCC". Default is Doxyparse. See Egypt::Extractor::GCC(3) for information on how to
setup your source tree in order to use the GCC extractor.

=for Euclid:
  extractor.type: string, extractor =~ /\A\w+\Z/
  extractor.default: 'Doxyparse'

=item --help

Displays help on command line syntax and options.

=back

=head1 HOW IT WORKS

The two major tasks in creating a call graph are analyzing the syntax
of the source code to find the function calls and laying out the
graph, but Egypt actually does neither.  Instead, it delegates the
source code analysis to GCC and the graph layout to Graphviz, both of
which are better at their respective jobs than egypt could ever hope
to be itself.  Egypt itself is just a small Perl script that acts as
glue between these existing tools.

Egypt takes advantage of GCC's capability to dump an intermediate
representation of the program being compiled into a file (a I<RTL
file>); this file is much easier to extract information from than a C
source file.  Egypt extracts information about function calls from the
RTL file and massages it into the format used by Graphviz.

=head1 VIEWING THE GRAPH

To view the generated graph, pipe egypt's output to one of the 
Graphiz tools. You can use B<dotty(1)> to display the graph in a
X11 window:

    $ egypt graph src/ | dotty -

You can also generate a file to print or include in a document
by using the B<dot(1)>.

To generate a PNG image called F<graph.png>:

  $ egypt graph src/ | dot -Tpng -ograph.png -

To generate a PostScript version of the dependency graph for printing, you can
also use the B<dot>. For example, to generate a dependency graph in the file
F<graph.ps> fitting everything on a US letter size page in landscape mode, try

  $ egypt graph src/ | dot -Grotate=90 -Gsize=11,8.5 -Tps -o graph.ps

Sometimes, the graph will fit better if the dependencies arrows go from left to
right instead of top to bottom.  The B<dot> option B<-Grankdir=LR> will do
that:

  $ egypt graph src/ | dot -Gsize=8.5,11 -Grankdir=LR -Tps -o graph.ps

For large software, the graph may end up too small
to comfortably read.  If that happens, try N-up printing:

  $ egypt graph src/ | dot -Gpage=8.5,11 -Tps -o graph.ps

You can also try playing with other B<dot> options such as B<-Gratio>,
or for a different style of graph, try using B<neato> instead of
B<dot>.  See the Graphwiz documentation for more information about the
various options available for customizing the style of the graph.

=head1 READING THE GRAPH

When generating a graph in the function level (i.g. without the I<--modules>
option), function calls are displayed as solid arrows.  A dotted arrow means
that the function the arrow points from takes the address of the function the
arrow points to; this typically indicates that the latter function is being
used as a callback.

When the I<--modules> option is on, then there are only solid arrows. An arrow
from I<A> to I<B> means that I<A> depends on I<B>.

=head1 SEE ALSO

B<dotty(1)>, B<dot(1)>, B<neato(1)>, B<egypt(1)>

=head1 COPYRIGHT AND AUTHORS

See B<egypt(1)>

=cut

use strict;

use Egypt::Extractor;
use Egypt::Output::DOT;

my $extractor = Egypt::Extractor->load($ARGV{'--extractor'});
my $model = $extractor->model;
my $output = new Egypt::Output::DOT(model => $model);

# functions to omit
for my $omited (split(/,/, $ARGV{'--omit'} || '')) {
  $output->omit($omited);
}

# whether to include external functions or not
$output->include_externals($ARGV{'--include-external'});

# whether to cluster functions by file or not
$output->cluster($ARGV{'--cluster'});

# wheter to group by module or not
$output->group_by_module($ARGV{'--modules'});

$extractor->process(@{$ARGV{'<input>'}});
print $output->string;

exit(0);
