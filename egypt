#!/usr/bin/perl -w

use Getopt::Euclid;

=head1 NAME

egypt - create call graph from gcc RTL dump

=head1 VERSION

This documentation applies to egypt version 1.8.

=head1 USAGE

  egypt [options] <file>...

=head1 DESCRIPTION

Egypt is a simple tool for creating call graphs of C programs.

=head1 REQUIRED ARGUMENTS

=over

=item <file>...

egypt can process any number of RTL files passed to it on the command line. If
you pass directories in the command line, egypt will find those directories for
files that match *.rtl and *.expand, and process them.

If no input files are given in the command line, egypt will expect the RTL data
in the standard input.

=back

=head1 OPTIONS

=over

=item --omit <functions>

Omit the given functions from the call graph.  Multiple function names
may be given separated by commas.

=for Euclid:
  functions.type: string
  functions.type.error: --omit must be given a comma-separated list of function names

=item --include-external

Include calls to external functions in the call graph.  A function is
considered external if it is not defined in any of the input files.
For example, functions in the standard C library are external.  By
default, such calls are not shown.  Even with this option, only direct
calls will be shown; there is no way to show indirect calls to
external functions.

=item --cluster

Cluster the functions into files, so you can see in which files are the calling
and called functions.

=item --modules

Group the functions by modules(files), and only represent calls between
modules. This is useful to see the dependencies between the modules of the
program, intead of focusing on specific functions. The arrows between the
modules will be labelled with a number that represents the number of different
places in which the calling module calls functions in the called module (i.e.
how many times module A calls module B).

It doesn't make much sense to use --modules together with --cluster.

=item --extractor <extractor>

Define wich extractor method use to analise source code. Default is GCC.

=for Euclid:
  extractor.type: string, extractor =~ /\A\w+\Z/
  extractor.default: 'Doxyparse'

=item --version

Displays egypt version information and exits.

=item --help

Displays help on command line syntax and options.

=back

=head1 HOW IT WORKS

The two major tasks in creating a call graph are analyzing the syntax
of the source code to find the function calls and laying out the
graph, but Egypt actually does neither.  Instead, it delegates the
source code analysis to GCC and the graph layout to Graphviz, both of
which are better at their respective jobs than egypt could ever hope
to be itself.  Egypt itself is just a small Perl script that acts as
glue between these existing tools.

Egypt takes advantage of GCC's capability to dump an intermediate
representation of the program being compiled into a file (a I<RTL
file>); this file is much easier to extract information from than a C
source file.  Egypt extracts information about function calls from the
RTL file and massages it into the format used by Graphviz.

=head1 GENERATING THE RTL FILE

Compile the program or source file you want to create a call graph for
with gcc, adding the option "-dr" to CFLAGS.  This option causes gcc
to dump its intermediate code representation of each file it compiles
into a a file.

For example, the following works for many programs:

   make clean
   make CFLAGS=-dr

Depending on the GCC version, the RTL file for a source file F<foo.c>
may be called something like F<foo.c.rtl>, F<foo.c.00.rtl>, or
F<foo.c.00.expand>.

=head1 VIEWING THE CALL GRAPH

To view the call graph in an X11 window, run egypt with one or
more .rtl files as command line arguments and pipe its output to the
B<dotty> program from the Graphviz package.  For example, if you
compiled F<foo.c> with C<gcc -dr> to generate F<foo.c.00.rtl>, use

    egypt foo.c.00.rtl | dotty -

=head1 PRINTING THE CALL GRAPH

To generate a PostScript version of the call graph for printing, use
the B<dot> program from the Graphviz package.  For example, to generate
a callgraph in the file F<callgraph.ps> fitting everything on a US
letter size page in landscape mode, try

   egypt foo.c.00.rtl | dot -Grotate=90 -Gsize=11,8.5 -Tps -o callgraph.ps

Sometimes, the graph will fit better if function calls go from left to
right instead of top to bottom.  The B<dot> option B<-Grankdir=LR>
will do that:

   egypt foo.c.00.rtl | dot -Gsize=8.5,11 -Grankdir=LR -Tps -o callgraph.ps

For nontrivial programs, the graph may end up too small
to comfortably read.  If that happens, try N-up printing:

   egypt foo.c.00.rtl | dot -Gpage=8.5,11 -Tps -o callgraph.ps

You can also try playing with other B<dot> options such as B<-Gratio>,
or for a different style of graph, try using B<neato> instead of
B<dot>.  See the Graphwiz documentation for more information about the
various options available for customizing the style of the graph.

=head1 READING THE CALL GRAPH

Function calls are displayed as solid arrows.  A dotted arrow means
that the function the arrow points from takes the address of the
function the arrow points to; this typically indicates that the latter
function is being used as a callback.

=head1 WHY IS IT CALLED EGYPT?

Egypt was going to be called B<rtlcg>, short for I<RTL Call Graph>,
but it turned out to be one of those rare cases where ROT13'ing the
name made it easier to remember and pronounce.

=head1 SEE ALSO

L<gcc>, L<dotty>, L<dot>, L<neato>

=head1 COPYRIGHT

Copyright (c) 1994-2006 Andreas Gustafsson
Copyright (c) 2008-2009 Antonio Terceiro

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 AUTHORS

Andreas Gustafsson wrote the original version of egypt. Antonio Terceiro built
on his work and did a major refactoring while adding several features.

=cut

use strict;

use Egypt::Extractor;
use Egypt::Output::DOT;

my $extractor = Egypt::Extractor->load($ARGV{'--extractor'});
my $model = $extractor->model;
my $output = new Egypt::Output::DOT(model => $model);

# functions to omit
for my $omited (split(/,/, $ARGV{'--omit'} || '')) {
  $output->omit($omited);
}

# whether to include external functions or not
$output->include_externals($ARGV{'--include-external'});

# whether to cluster functions by file or not
$output->cluster($ARGV{'--cluster'});

# wheter to group by module or not
$output->group_by_module($ARGV{'--modules'});

$extractor->process(@{$ARGV{'<file>'}});
print $output->string;

exit(0);
