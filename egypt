#!/usr/bin/perl -w

use Pod::Usage;
our $VERSION = '1.9.0';

=head1 NAME

egypt - a source code analysis suite

=head1 SYNOPSIS

  egypt <tool> [tool-options] <toolargs> [<tool-args> ...]
  egypt <option>

=head1 DESCRIPTION

egypt is a suite of source code analysis tools, aimed at being
language-independent and extensible. The 'egypt' program is only a starting
point for new users, after you understand how egypt works you will use the
egypt tools through their own programs directly. See TOOLS below for more
information.

=head1 TOOLS

egypt has several individual tools that share a core infrastructure, but do
different analysis and produce different output. They are normally invoked like
this:

  egypt <tool> [tool-options] <tool-args> [<tool-args> ...]

Although you can invoke egypt tools against one or few files inside a project,
normally it only makes sense to run it against the entire source tree (e.g.
passing "." or "./src" as input directories).

The options and output are specific to each tool, so make sure to read the
corresponding manual for the tool(s) you want.

=head1 OPTIONS

The following are the options for the wrapper egypt script. The options for
each tools are documented in the respective tool's manual page.

=over

=item --version

Displays version information and exits.

=item --help

Displays help for the 'egypt' command.

=back

=head1 COPYRIGHT

=over

=item Copyright (c) 1994-2006 Andreas Gustafsson

=item Copyright (c) 2008-2009 Antonio Terceiro

=back

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 AUTHORS

Andreas Gustafsson wrote the original version of egypt. Since them several
people contributed to egypt's development. See the AUTHORS file for a complete
list.

=cut

use strict;
use File::Basename;

my $base = dirname(__FILE__);

sub usage {
  my $status = shift;
  pod2usage(-verbose => 1, -exitval => "NOEXIT");
  list_egypt_tools();
  exit($status);
}

sub list_egypt_tools {
  print("Available commands:\n");
  print("\n");
  for my $cmd_program (sort(glob("$base/egypt-*"))) {
    $cmd_program =~ /^.*egypt-(.*)$/;
    my $cmd = $1;
    printf("    %s\n", $cmd);
  }
  print("\n");
}

sub show_version {
  printf("egypt version %s\n", $VERSION);
  exit(0);
}

if (scalar(@ARGV) == 0) {
  usage(1);
}

my $tool = shift(@ARGV);
if ($tool !~ /^[a-z]+$/) {
  if ($tool eq '--version') {
    show_version();
  } elsif($tool eq '--help') {
    usage(0);
  } else {
    printf("Invalid option: %s\n", $tool);
    usage(1);
  }
}

my $program = "$base/egypt-$tool";
if (! -x $program) {
  printf("\"%s\" is not an egypt command.\n\n", $tool);
  list_egypt_tools();
  exit(1);
}

# do not pass --version option ahead, since the tools don't have a version on
# their own.
my @args;
if (grep { $_ eq '--version' } @ARGV) {
  print("Invalid option: --version\n");
  system($program, '--help');
  exit(1);
} else {
  system($program, @ARGV);
  exit($? >> 8);
}

