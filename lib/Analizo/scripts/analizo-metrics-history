#!/usr/bin/ruby
# metrics-history
# Generates the metrics of the whole history of an application.
# Antônio Terceiro (terceiro@dcc.ufba.br)
# Luiz Romário Santana Rios (luizromario@gmail.com)
# 
# Usage: ./metrics-history directory
#
# WARNING NOTE: Do not run this script in a work folder, since it 
# will checkout every commit in history, which may destroy your
# ongoing work.
#
require 'rubygems'
require 'yaml'
require 'benchmark'
require 'time'

$ANALIZO_METRICS_OPTIONS = nil
FILTER = /\.(c|h|cpp|cxx|cc|hpp|java)$/

class Repository
  def wanted_commits
    repository = {}
    result = []
    commit = nil
    last_wanted = nil
    `git log --pretty=format:%H`.each_line do |line|
      line.strip!
      commit = Commit.new(line, repository)
      repository[commit.id] = commit
      if commit.relevant?
        result << commit
      end
    end
    result
  end
end

class Commit
  attr_reader :id, :repository
  alias :to_s :id
  def initialize(id, repository)
    @id = id
    @repository = repository
  end
  def changed_files
    data[:changed_files]
  end
  def parent_ids
    data[:parent_ids]
  end
  def parents
    parent_ids.map { |i| repository[i] }
  end
  def authored_date
    data[:authored_date]
  end
  def author_name
    data[:author_name]
  end
  def author_email
    data[:author_email]
  end
  def merge?
    parent_ids.size > 1
  end
  def first_commit?
    parent_ids.size == 0
  end
  def relevant?
    changed_files.any? { |file| file =~ FILTER }
  end
  def previous_wanted
    if merge? || first_commit?
      nil
    else
      parent = parents.first
      if parent.relevant?
        parent
      else
        parent.previous_wanted
      end
    end
  end

  private
  def data
    @data ||=
      begin
        output = `git show --name-only --format=%P/%aD/%aN/%aE #{id}`.lines.map(&:strip)
        header = output.shift.split('/')
        {
          :changed_files => output.reject { |line| line.empty? },
          :parent_ids => header[0].split,
          :authored_date => Time.parse(header[1]),
          :author_name => header[2],
          :author_email => header[3],
        }
      end
  end
end

class AnalizoRunner
  def self.metrics(commit)
    system("git checkout #{commit} > /dev/null 2>> git.log")
    if "" == yaml_metrics = `analizo metrics #{$ANALIZO_METRICS_OPTIONS} . 2> /dev/null` then
      false
    else
      YAML.load_stream(yaml_metrics).documents
    end
  end
  def self.metricsCSV(commit)
    metr = metrics(commit)
    if metr then
      csv_string = ""
      csv_string << commit.id; csv_string << ","
      pa = commit.previous_wanted
      if pa then
        csv_string << commit.previous_wanted.id
      end
      csv_string << ","
      csv_string << commit.author_name.inspect; csv_string << ","
      csv_string << commit.author_email; csv_string << ","

      csv_string << metr[0].keys.sort.map{|key| metr[0][key]}.join(','); csv_string << ","
      csv_string << `git show --pretty=format: --name-only #{commit.id}`.split.join(',').inspect; csv_string << ","
      csv_string << commit.authored_date.rfc2822.inspect
    end
  end
end

def usage(status)
  puts "Usage: #{$PROGRAM_NAME} [OPTIONS] directory"
  exit(status)
end

require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
  [ '--list', '-l', GetoptLong::NO_ARGUMENT ],
  [ '--analizo-metrics-options', '-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--usage', GetoptLong::NO_ARGUMENT ]
)

list_only = false
opts.each do |opt,value|
  case opt
  when '--analizo-metrics-options'
    $ANALIZO_METRICS_OPTIONS = value
  when '--help'
    exec 'analizo', 'doc', __FILE__
  when '--usage'
    usage(0)
  when '--list'
    list_only = true
  end
end

if !ARGV[0] then
  usage(1)
end
if !File.exists?(File.join(ARGV[0], '.git'))
  puts "Fatal: Not a git repository."
  exit
end
previous_directory = Dir.pwd
Dir.chdir(ARGV[0])
system("echo \"Log opened at: #{Time.now}\" >> git.log")
system("echo \"Log opened at: #{Time.now}\" >> analizo.log")
system("echo \"Log opened at: #{Time.now}\" >> doxyparse.log")
system("git checkout master > /dev/null 2>> git.log")

File.open('metrics.csv', 'w') do |file|
  file.puts "commit_id,previous_commit_id,author,e-mail,average_coupiling,average_lcom4,number_of_functions,number_of_modules,number_of_public_functions,total_loc,changed_files,date\n"
  wl = Repository.new.wanted_commits
  if list_only
    puts wl
    exit 0
  end
  if wl.size == 0 then
    puts "No relevant commits to proccess"
  else
    print "Processing " 
    if wl.size == 1 then
      puts "one commit"
    else
      puts "#{wl.size} commits..."
    end
  end
  error_counter = 0
  wl.each do |commit|
    if mcsv = AnalizoRunner.metricsCSV(commit) then
      file.puts mcsv
      print "."
    else
      print "E"
      system("analizo metrics #{$ANALIZO_METRICS_OPTIONS} . >> analizo.log 2>> analizo.log")
      system("doxyparse . >> doxyparse.log 2>> doxyparse.log")
      error_counter +=1
    end
  end
  if error_counter == 0 then
    puts "\nDone.\n"
  else
    if error_counter == 1 then
      print "\nOne error"
    else
      print "\n#{error_counter} errors"
    end
    puts " ocurred. Check analizo.log and git.log for more details.\n"
  end
  system("git checkout master > /dev/null 2>> git.log")
end

system("echo \"Log closed at: #{Time.now}\" >> git.log")
system("echo \"Log closed at: #{Time.now}\" >> analizo.log")
system("echo \"Log closed at: #{Time.now}\" >> doxyparse.log")

__END__

=head1 NAME

analizo-metrics-history - processes a Git repository collection metrics for
every single revision.

=head1 USAGE

analizo metrics-history [OPTION] DIRECTORY

=head1 DESCRIPTION

B<analizo metrics-history> will process I<DIRECTORY>, a Git repository with a
working copy of the source code (i.e. not a bare git repository), checkout
every relevant commit and run B<analizo metrics> on it. The metrics for all of
the revisions will be accumulated in a file called I<metrics.csv> inside
I<DIRECTORY>.

=head1 RELEVANT COMMITS

B<analizo metrics-history> considers as relevant the commits that changed at
least one source code file. Consequently, it skips all the commits where no
source code file was changed, such as documentation, translations, build system
changes, etc.

Currently we support C, C++ and Java projects, and therefore files considered
source code are the ones terminated in I<.c>, I<.h>, I<.cpp>, I<.cxx>, I<.cc>,
I<.hpp>, and I<.java>.

=head1 OPTIONS

=over

=item --analizo-metrics-options "OPTIONS" | -o "OPTIONS"

Passes I<OPTIONS> to the I<analizo metrics> calls. For example, if you want to
ignore the "test" directory while analysing the project history, you call
analizo metrics-history as B<analizo metrics-history --analizo-metrics-options
"--exclude test">.

=item --list | -l

Instead of actually processing the history, just print out the ids of the
commits that would be processed.

=item --help

Displays help for B<analizo metrics-history>.

=item --usage

Displays usage information for B<analizo metrics-history>.

=back

=head1 SEE ALSO

B<analizo-metrics(1)>

=head1 COPYRIGHT AND AUTHORS

See B<analizo(1)>

=cut
