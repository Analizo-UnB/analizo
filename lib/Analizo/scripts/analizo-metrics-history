#!/usr/bin/perl

=head1 NAME

analizo-metrics-history - processes a Git repository collection metrics for
every single revision.

=head1 USAGE

analizo metrics-history [OPTION] DIRECTORY

=head1 DESCRIPTION

B<analizo metrics-history> will process I<DIRECTORY>, a Git repository with a
working copy of the source code (i.e. not a bare git repository), checkout
every relevant commit and run B<analizo metrics> on it. The metrics for all of
the revisions will be accumulated in a file called I<metrics.csv> inside
I<DIRECTORY>.

=head1 RELEVANT COMMITS

B<analizo metrics-history> considers as relevant the commits that changed at
least one source code file. Consequently, it skips all the commits where no
source code file was changed, such as documentation, translations, build system
changes, etc.

Currently we support C, C++ and Java projects, and therefore files considered
source code are the ones terminated in I<.c>, I<.h>, I<.cpp>, I<.cxx>, I<.cc>,
I<.hpp>, and I<.java>.

=head1 OPTIONS

=over

=item --language LANGUAGE, --exclude DIRECTORY

Use programming language and directory exclusion filters. See
B<analizo-metrics(1)> for a description of these options.

=item --list | -l

Instead of actually processing the history, just print out the ids of the
commits that would be processed.

=item --help

Displays help for B<analizo metrics-history>.

=item --usage

Displays usage information for B<analizo metrics-history>.

=back

=head1 SEE ALSO

B<analizo-metrics(1)>

=head1 COPYRIGHT AND AUTHORS

See B<analizo(1)>

=cut

use Getopt::Long;

my $__help          = undef;
my $__list_only     = undef;
my $__language      = undef;
my $__exclude       = undef;
my $__output        = undef;

GetOptions(
  'help'          => \$__help,
  'l|list'        => \$__list_only,
  'language=s'    => \$__language,
  'o|output=s'    => \$__output,
  'exclude|x=s'   => \$__exclude,
) or exit(1);

if ($__help) {
  exec('analizo', 'doc', __FILE__)
}

use Analizo::Batch::Git;
use Analizo::Batch::Runner::Sequential;
use Analizo::Batch::Output::CSV;

my $batch = new Analizo::Batch::Git(@ARGV);
if ($__list_only) {
  while (my $job = $batch->next()) {
    print $job->id, "\n";
  }
  exit 0;
}

if ($__language) {
  require Analizo::LanguageFilter;
  my $language_filter = Analizo::LanguageFilter->new($__language);
  $batch->filters($language_filter);
}
if ($__exclude) {
  my @excluded_directories = split(':', $__exclude);
  $batch->exclude(@excluded_directories);
}

my $output = new Analizo::Batch::Output::CSV;
if ($__output) {
  $output->file($__output);
}

my $runner = new Analizo::Batch::Runner::Sequential;
$runner->run($batch, $output);
