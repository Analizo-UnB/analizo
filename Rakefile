def cucumber(args)
  options = "--format progress #{args}"
  if system("which cucumber")
    sh "cucumber #{options}"
  else
    sh "bundle exec cucumber #{options}"
  end
end

def banner_format
  $stdout.isatty ? "\033[33;01m%s\033[m" : "%s"
end

def banner(msg)
  puts banner_format % ('=' * 72)
  puts banner_format % msg
  puts banner_format % ('=' * 72)
end

desc 'Run Perl unit tests'
task 'test:perl' do
  banner 'Perl unit tests'
  sh('prove -Ilib t/')
end

require 'rake/testtask'
Rake::TestTask.new('test:ruby:run') do |t|
  t.libs << "test"
  t.test_files = FileList['test/*_test.rb']
  t.verbose = true
end

task 'test:ruby' do
  banner 'Ruby unit tests'
  Rake::Task['test:ruby:run'].invoke
end

desc 'Run acceptance tests'
task 'cucumber' do
  banner 'Acceptance tests'
  cucumber '--tags ~@wip features/'
end

task :default do
  unless system('which doxyparse > /dev/null')
    raise "E: doxyparse program not found, bailing out"
  end
  errors = ['test:perl', 'test:ruby', 'cucumber'].map do |task|
    begin
      Rake::Task[task].invoke
      nil
    rescue => e
      task
    end
  end.compact
  abort "Errors running #{errors.inspect}!" if errors.any?
end

desc "Run all acceptance tests (even those marked as WIP)"
task 'cucumber:all' do
  cucumber 'features/'
end

desc "Run acceptance tests marked as WIP"
task 'cucumber:wip' do
  cucumber '--tags @wip features/'
end

desc 'updates MANIFEST from contents of git repository'
task 'manifest' do
  sh('git ls-tree -r --name-only HEAD > MANIFEST')
end

version = File.readlines('analizo').find { |item| item =~ /VERSION =/ }.strip.gsub(/.*VERSION = '(.*)'.*/, '\1')

desc 'prepares a release tarball'
task :release => [:authors, :manifest, :check_repo, :check_tag, :default] do
  sh "perl Makefile.PL"
  sh "make"
  sh "make test"
  sh "make dist"
  sh "git tag #{version}"
end

NON_GIT_AUTHORS = [
  'Andreas Gustafsson <gson@gson.org>',
  'Luiz Rom√°rio Santana Rios <luizromario@gmail.com>',
]

desc 'updates the AUTHORS file'
task :authors do
  File.open("AUTHORS", 'w') do |f|
    f.puts "# This file is autogenerated. Please do NOT send patches that change it."
    f.puts "# See `Rakefile` instead."
    f.puts
  end

  command = NON_GIT_AUTHORS.map { |author| "echo '%s'" % author }.join(' ; ')
  sh "(#{command} ; git log --pretty=format:'%aN <%aE>') | sort | uniq >> AUTHORS"
end

desc 'checks if there are uncommitted changes in the repo'
task :check_repo do
  sh "git status | grep 'nothing to commit'" do |ok, res|
    if !ok
      raise "******** There are uncommited changes in the repository, cannot continue"
    end
  end
end

desc 'checks if there is already a tag for the curren version'
task :check_tag do
  sh "git tag | grep '^#{version}$' >/dev/null" do |ok, res|
    if ok
      raise "******** There is already a tag for version #{version}, cannot continue"
    end
  end
  puts "Not found tag for version #{version}, we can go on."
end
